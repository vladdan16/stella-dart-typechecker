// Dart File generated by the BNF Converter (bnfc 2.9.6).

import 'package:fast_immutable_collections/fast_immutable_collections.dart';
import 'package:stella_generated/stella_generated.dart';

A identityFn<A>(A a) => a;
String interpretStellaIdent(x) => x;
String interpretExtensionName(x) => x;
String interpretMemoryAddress(x) => x;
String interpretProgram(Program e) => switch (e) {
      AProgram aProgram =>
        "AProgram(${interpretLanguageDecl(aProgram.languageDecl)}, ${aProgram.stellaExtensionList.map(interpretStellaExtension)}, ${aProgram.declList.map(interpretDecl)})",
    };
String interpretListStellaIdent(IList<StellaIdent> e) => "$e";
String interpretLanguageDecl(LanguageDecl e) => switch (e) {
      LanguageCore languageCore => "LanguageCore()",
    };
String interpretStellaExtension(StellaExtension e) => switch (e) {
      AnExtension anExtension =>
        "AnExtension(${anExtension.extensionNameList.map(interpretExtensionName)})",
    };
String interpretListExtensionName(IList<ExtensionName> e) => "$e";
String interpretListExtension(IList<StellaExtension> e) => "$e";
String interpretDecl(Decl e) => switch (e) {
      DeclFun declFun =>
        "DeclFun(${declFun.annotationList.map(interpretAnnotation)}, ${interpretStellaIdent(declFun.stellaIdent)}, ${declFun.paramDeclList.map(interpretParamDecl)}, ${interpretReturnType(declFun.returnType)}, ${interpretThrowType(declFun.throwType)}, ${declFun.declList.map(interpretDecl)}, ${interpretExpr(declFun.expr)})",
      DeclFunGeneric declFunGeneric =>
        "DeclFunGeneric(${declFunGeneric.annotationList.map(interpretAnnotation)}, ${interpretStellaIdent(declFunGeneric.stellaIdent)}, ${declFunGeneric.stellaIdentList.map(interpretStellaIdent)}, ${declFunGeneric.paramDeclList.map(interpretParamDecl)}, ${interpretReturnType(declFunGeneric.returnType)}, ${interpretThrowType(declFunGeneric.throwType)}, ${declFunGeneric.declList.map(interpretDecl)}, ${interpretExpr(declFunGeneric.expr)})",
      DeclTypeAlias declTypeAlias =>
        "DeclTypeAlias(${interpretStellaIdent(declTypeAlias.stellaIdent)}, ${interpretStellaType(declTypeAlias.stellaType)})",
      DeclExceptionType declExceptionType =>
        "DeclExceptionType(${interpretStellaType(declExceptionType.stellaType)})",
      DeclExceptionVariant declExceptionVariant =>
        "DeclExceptionVariant(${interpretStellaIdent(declExceptionVariant.stellaIdent)}, ${interpretStellaType(declExceptionVariant.stellaType)})",
    };
String interpretListDecl(IList<Decl> e) => "$e";
String interpretLocalDecl(LocalDecl e) => switch (e) {
      ALocalDecl aLocalDecl => "ALocalDecl(${interpretDecl(aLocalDecl.decl)})",
    };
String interpretListLocalDecl(IList<LocalDecl> e) => "$e";
String interpretAnnotation(Annotation e) => switch (e) {
      InlineAnnotation inlineAnnotation => "InlineAnnotation()",
    };
String interpretListAnnotation(IList<Annotation> e) => "$e";
String interpretParamDecl(ParamDecl e) => switch (e) {
      AParamDecl aParamDecl =>
        "AParamDecl(${interpretStellaIdent(aParamDecl.stellaIdent)}, ${interpretStellaType(aParamDecl.stellaType)})",
    };
String interpretListParamDecl(IList<ParamDecl> e) => "$e";
String interpretReturnType(ReturnType e) => switch (e) {
      NoReturnType noReturnType => "NoReturnType()",
      SomeReturnType someReturnType =>
        "SomeReturnType(${interpretStellaType(someReturnType.stellaType)})",
    };
String interpretThrowType(ThrowType e) => switch (e) {
      NoThrowType noThrowType => "NoThrowType()",
      SomeThrowType someThrowType =>
        "SomeThrowType(${someThrowType.stellaTypeList.map(interpretStellaType)})",
    };
String interpretStellaType(StellaType e) => switch (e) {
      TypeFun typeFun =>
        "TypeFun(${typeFun.stellaTypeList.map(interpretStellaType)}, ${interpretStellaType(typeFun.stellaType)})",
      TypeForAll typeForAll =>
        "TypeForAll(${typeForAll.stellaIdentList.map(interpretStellaIdent)}, ${interpretStellaType(typeForAll.stellaType)})",
      TypeRec typeRec =>
        "TypeRec(${interpretStellaIdent(typeRec.stellaIdent)}, ${interpretStellaType(typeRec.stellaType)})",
      TypeSum typeSum =>
        "TypeSum(${interpretStellaType(typeSum.stellaType1)}, ${interpretStellaType(typeSum.stellaType2)})",
      TypeTuple typeTuple =>
        "TypeTuple(${typeTuple.stellaTypeList.map(interpretStellaType)})",
      TypeRecord typeRecord =>
        "TypeRecord(${typeRecord.recordFieldTypeList.map(interpretRecordFieldType)})",
      TypeVariant typeVariant =>
        "TypeVariant(${typeVariant.variantFieldTypeList.map(interpretVariantFieldType)})",
      TypeList typeList =>
        "TypeList(${interpretStellaType(typeList.stellaType)})",
      TypeBool typeBool => "TypeBool()",
      TypeNat typeNat => "TypeNat()",
      TypeUnit typeUnit => "TypeUnit()",
      TypeTop typeTop => "TypeTop()",
      TypeBottom typeBottom => "TypeBottom()",
      TypeRef typeRef => "TypeRef(${interpretStellaType(typeRef.stellaType)})",
      TypeVar typeVar =>
        "TypeVar(${interpretStellaIdent(typeVar.stellaIdent)})",
    };
String interpretListType(IList<StellaType> e) => "$e";
String interpretMatchCase(MatchCase e) => switch (e) {
      AMatchCase aMatchCase =>
        "AMatchCase(${interpretPattern(aMatchCase.pattern)}, ${interpretExpr(aMatchCase.expr)})",
    };
String interpretListMatchCase(IList<MatchCase> e) => "$e";
String interpretOptionalTyping(OptionalTyping e) => switch (e) {
      NoTyping noTyping => "NoTyping()",
      SomeTyping someTyping =>
        "SomeTyping(${interpretStellaType(someTyping.stellaType)})",
    };
String interpretPatternData(PatternData e) => switch (e) {
      NoPatternData noPatternData => "NoPatternData()",
      SomePatternData somePatternData =>
        "SomePatternData(${interpretPattern(somePatternData.pattern)})",
    };
String interpretExprData(ExprData e) => switch (e) {
      NoExprData noExprData => "NoExprData()",
      SomeExprData someExprData =>
        "SomeExprData(${interpretExpr(someExprData.expr)})",
    };
String interpretPattern(Pattern e) => switch (e) {
      PatternVariant patternVariant =>
        "PatternVariant(${interpretStellaIdent(patternVariant.stellaIdent)}, ${interpretPatternData(patternVariant.patternData)})",
      PatternInl patternInl =>
        "PatternInl(${interpretPattern(patternInl.pattern)})",
      PatternInr patternInr =>
        "PatternInr(${interpretPattern(patternInr.pattern)})",
      PatternTuple patternTuple =>
        "PatternTuple(${patternTuple.patternList.map(interpretPattern)})",
      PatternRecord patternRecord =>
        "PatternRecord(${patternRecord.labelledPatternList.map(interpretLabelledPattern)})",
      PatternList patternList =>
        "PatternList(${patternList.patternList.map(interpretPattern)})",
      PatternCons patternCons =>
        "PatternCons(${interpretPattern(patternCons.pattern1)}, ${interpretPattern(patternCons.pattern2)})",
      PatternFalse patternFalse => "PatternFalse()",
      PatternTrue patternTrue => "PatternTrue()",
      PatternUnit patternUnit => "PatternUnit()",
      PatternInt patternInt => "PatternInt(${identityFn(patternInt.integer)})",
      PatternSucc patternSucc =>
        "PatternSucc(${interpretPattern(patternSucc.pattern)})",
      PatternVar patternVar =>
        "PatternVar(${interpretStellaIdent(patternVar.stellaIdent)})",
    };
String interpretListPattern(IList<Pattern> e) => "$e";
String interpretLabelledPattern(LabelledPattern e) => switch (e) {
      ALabelledPattern aLabelledPattern =>
        "ALabelledPattern(${interpretStellaIdent(aLabelledPattern.stellaIdent)}, ${interpretPattern(aLabelledPattern.pattern)})",
    };
String interpretListLabelledPattern(IList<LabelledPattern> e) => "$e";
String interpretBinding(Binding e) => switch (e) {
      ABinding aBinding =>
        "ABinding(${interpretStellaIdent(aBinding.stellaIdent)}, ${interpretExpr(aBinding.expr)})",
    };
String interpretListBinding(IList<Binding> e) => "$e";
String interpretExpr(Expr e) => switch (e) {
      Sequence sequence =>
        "Sequence(${interpretExpr(sequence.expr1)}, ${interpretExpr(sequence.expr2)})",
      Assign assign =>
        "Assign(${interpretExpr(assign.expr1)}, ${interpretExpr(assign.expr2)})",
      StellaIf stellaIf =>
        "StellaIf(${interpretExpr(stellaIf.expr1)}, ${interpretExpr(stellaIf.expr2)}, ${interpretExpr(stellaIf.expr3)})",
      Let let =>
        "Let(${let.patternBindingList.map(interpretPatternBinding)}, ${interpretExpr(let.expr)})",
      LetRec letRec =>
        "LetRec(${letRec.patternBindingList.map(interpretPatternBinding)}, ${interpretExpr(letRec.expr)})",
      TypeAbstraction typeAbstraction =>
        "TypeAbstraction(${typeAbstraction.stellaIdentList.map(interpretStellaIdent)}, ${interpretExpr(typeAbstraction.expr)})",
      LessThan lessThan =>
        "LessThan(${interpretExpr(lessThan.expr1)}, ${interpretExpr(lessThan.expr2)})",
      LessThanOrEqual lessThanOrEqual =>
        "LessThanOrEqual(${interpretExpr(lessThanOrEqual.expr1)}, ${interpretExpr(lessThanOrEqual.expr2)})",
      GreaterThan greaterThan =>
        "GreaterThan(${interpretExpr(greaterThan.expr1)}, ${interpretExpr(greaterThan.expr2)})",
      GreaterThanOrEqual greaterThanOrEqual =>
        "GreaterThanOrEqual(${interpretExpr(greaterThanOrEqual.expr1)}, ${interpretExpr(greaterThanOrEqual.expr2)})",
      Equal equal =>
        "Equal(${interpretExpr(equal.expr1)}, ${interpretExpr(equal.expr2)})",
      NotEqual notEqual =>
        "NotEqual(${interpretExpr(notEqual.expr1)}, ${interpretExpr(notEqual.expr2)})",
      TypeAsc typeAsc =>
        "TypeAsc(${interpretExpr(typeAsc.expr)}, ${interpretStellaType(typeAsc.stellaType)})",
      TypeCast typeCast =>
        "TypeCast(${interpretExpr(typeCast.expr)}, ${interpretStellaType(typeCast.stellaType)})",
      Abstraction abstraction =>
        "Abstraction(${abstraction.paramDeclList.map(interpretParamDecl)}, ${interpretExpr(abstraction.expr)})",
      Variant variant =>
        "Variant(${interpretStellaIdent(variant.stellaIdent)}, ${interpretExprData(variant.exprData)})",
      Match match =>
        "Match(${interpretExpr(match.expr)}, ${match.matchCaseList.map(interpretMatchCase)})",
      StellaList stellaList =>
        "StellaList(${stellaList.exprList.map(interpretExpr)})",
      Add add =>
        "Add(${interpretExpr(add.expr1)}, ${interpretExpr(add.expr2)})",
      Subtract subtract =>
        "Subtract(${interpretExpr(subtract.expr1)}, ${interpretExpr(subtract.expr2)})",
      LogicOr logicOr =>
        "LogicOr(${interpretExpr(logicOr.expr1)}, ${interpretExpr(logicOr.expr2)})",
      Multiply multiply =>
        "Multiply(${interpretExpr(multiply.expr1)}, ${interpretExpr(multiply.expr2)})",
      Divide divide =>
        "Divide(${interpretExpr(divide.expr1)}, ${interpretExpr(divide.expr2)})",
      LogicAnd logicAnd =>
        "LogicAnd(${interpretExpr(logicAnd.expr1)}, ${interpretExpr(logicAnd.expr2)})",
      Ref ref => "Ref(${interpretExpr(ref.expr)})",
      Deref deref => "Deref(${interpretExpr(deref.expr)})",
      Application application =>
        "Application(${interpretExpr(application.expr)}, ${application.exprList.map(interpretExpr)})",
      TypeApplication typeApplication =>
        "TypeApplication(${interpretExpr(typeApplication.expr)}, ${typeApplication.stellaTypeList.map(interpretStellaType)})",
      DotRecord dotRecord =>
        "DotRecord(${interpretExpr(dotRecord.expr)}, ${interpretStellaIdent(dotRecord.stellaIdent)})",
      DotTuple dotTuple =>
        "DotTuple(${interpretExpr(dotTuple.expr)}, ${identityFn(dotTuple.integer)})",
      Tuple tuple => "Tuple(${tuple.exprList.map(interpretExpr)})",
      Record record => "Record(${record.bindingList.map(interpretBinding)})",
      ConsList consList =>
        "ConsList(${interpretExpr(consList.expr1)}, ${interpretExpr(consList.expr2)})",
      Head head => "Head(${interpretExpr(head.expr)})",
      IsEmpty isEmpty => "IsEmpty(${interpretExpr(isEmpty.expr)})",
      Tail tail => "Tail(${interpretExpr(tail.expr)})",
      Panic panic => "Panic()",
      StellaThrow stellaThrow =>
        "StellaThrow(${interpretExpr(stellaThrow.expr)})",
      TryCatch tryCatch =>
        "TryCatch(${interpretExpr(tryCatch.expr1)}, ${interpretPattern(tryCatch.pattern)}, ${interpretExpr(tryCatch.expr2)})",
      TryWith tryWith =>
        "TryWith(${interpretExpr(tryWith.expr1)}, ${interpretExpr(tryWith.expr2)})",
      Inl inl => "Inl(${interpretExpr(inl.expr)})",
      Inr inr => "Inr(${interpretExpr(inr.expr)})",
      Succ succ => "Succ(${interpretExpr(succ.expr)})",
      LogicNot logicNot => "LogicNot(${interpretExpr(logicNot.expr)})",
      Pred pred => "Pred(${interpretExpr(pred.expr)})",
      IsZero isZero => "IsZero(${interpretExpr(isZero.expr)})",
      Fix fix => "Fix(${interpretExpr(fix.expr)})",
      NatRec natRec =>
        "NatRec(${interpretExpr(natRec.expr1)}, ${interpretExpr(natRec.expr2)}, ${interpretExpr(natRec.expr3)})",
      Fold fold =>
        "Fold(${interpretStellaType(fold.stellaType)}, ${interpretExpr(fold.expr)})",
      Unfold unfold =>
        "Unfold(${interpretStellaType(unfold.stellaType)}, ${interpretExpr(unfold.expr)})",
      ConstTrue constTrue => "ConstTrue()",
      ConstFalse constFalse => "ConstFalse()",
      ConstUnit constUnit => "ConstUnit()",
      ConstInt constInt => "ConstInt(${identityFn(constInt.integer)})",
      ConstMemory constMemory =>
        "ConstMemory(${interpretMemoryAddress(constMemory.memoryAddress)})",
      StellaVar stellaVar =>
        "StellaVar(${interpretStellaIdent(stellaVar.stellaIdent)})",
    };
String interpretListExpr(IList<Expr> e) => "$e";
String interpretPatternBinding(PatternBinding e) => switch (e) {
      APatternBinding aPatternBinding =>
        "APatternBinding(${interpretPattern(aPatternBinding.pattern)}, ${interpretExpr(aPatternBinding.expr)})",
    };
String interpretListPatternBinding(IList<PatternBinding> e) => "$e";
String interpretVariantFieldType(VariantFieldType e) => switch (e) {
      AVariantFieldType aVariantFieldType =>
        "AVariantFieldType(${interpretStellaIdent(aVariantFieldType.stellaIdent)}, ${interpretOptionalTyping(aVariantFieldType.optionalTyping)})",
    };
String interpretListVariantFieldType(IList<VariantFieldType> e) => "$e";
String interpretRecordFieldType(RecordFieldType e) => switch (e) {
      ARecordFieldType aRecordFieldType =>
        "ARecordFieldType(${interpretStellaIdent(aRecordFieldType.stellaIdent)}, ${interpretStellaType(aRecordFieldType.stellaType)})",
    };
String interpretListRecordFieldType(IList<RecordFieldType> e) => "$e";
String interpretTyping(Typing e) => switch (e) {
      ATyping aTyping =>
        "ATyping(${interpretExpr(aTyping.expr)}, ${interpretStellaType(aTyping.stellaType)})",
    };
